name: R package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: pages
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
      - name: Install dependencies for devtools
        run: |
          sudo apt-get update -y
          sudo apt-get install cmake libgit2-dev libssh2-1-dev libcurl4-openssl-dev pandoc libharfbuzz-dev libfribidi-dev -y
      - name: Install devtools
        run: install.packages("devtools")
        shell: Rscript -v {0}
      - name: Check code style
        run: |
          Rscript -v -e 'install.packages(c("styler", "lintr"))'
          Rscript -v inst/pipeline/lint.R
      - name: Install dependencies
        run: devtools::install_deps(dependencies = TRUE)
        shell: Rscript -v {0}
      - name: Check documentation
        run: |
          Rscript -v -e 'install.packages("pkgdown")'
          Rscript -v inst/pipeline/document.R
      - name: Upload documentation
        run: |
          export LATEST_COMMITER_EMAIL=`git --no-pager log -1 -s --format="%ae"`
          echo $LATEST_COMMITER_EMAIL
          git config --global user.email "$LATEST_COMMITTER_EMAIL"
          git config --global user.name "$GITHUB_ACTOR"
          git add -f docs
          git commit -am "Rollout version ${{ env.APPLICATION_TAG_VERSION }}"
          git checkout pages
          rm -rf docs
          mkdir docs
          git checkout master -- docs README.md
          git add docs
          if ! git diff-index --quiet HEAD -- ; then git commit -am "Rollout version ${{ env.APPLICATION_TAG_VERSION }}" && git push origin pages --force; else echo "Nothing to push"; fi
          git checkout master
      - name: Check package (as CRAN)
        run: devtools::check(document = FALSE, args = "--no-tests", error_on = "warning")
        shell: Rscript -v {0}
      - name: Install package
        run: devtools::install()
        shell: Rscript -v {0}
      - name: Save package version
        run: |
          export APPLICATION_TAG_VERSION=`Rscript -e 'library(MissImp); paste(utils::packageVersion("MissImp"))'`
          echo "APPLICATION_TAG_VERSION=$APPLICATION_TAG_VERSION" >> $GITHUB_ENV
      - name: Testthat
        run: devtools::test(quiet = FALSE, clean = FALSE)
        shell: Rscript -v {0}
      - name: Coverage
        run: |
          install.packages("covr")
          print(devtools::test_coverage())
        shell: Rscript -v {0}
      - name: Check on Mac OS
        env:
          RHUB_TOKEN: ${{ secrets.RHUB_TOKEN }}
        run: Rscript -v inst/pipeline/rhubcheck.R -p "macos-highsierra-release-cran" -t "$RHUB_TOKEN"
      - name: Check on Windows
        env:
          RHUB_TOKEN: ${{ secrets.RHUB_TOKEN }}
        run: Rscript -v inst/pipeline/rhubcheck.R -p "windows-x86_64-devel" -t "$RHUB_TOKEN"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.APPLICATION_TAG_VERSION }}
          release_name: MissImp
          draft: false
          prerelease: false
